{"ast":null,"code":"var _jsxFileName = \"/Users/habitat/Desktop/share-bus/src/components/baseform/index.js\";\nimport React from 'react';\nimport { DatePicker, Input, Select, Form, Button, Checkbox, Radio } from \"antd\";\nimport Util from '../../utils/utils';\nconst FormItem = Form.Item;\nconst Option = Select.Option;\n\nclass FilterForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleFilterSubmit = () => {\n      let fieldsValue = this.props.form.getFieldsValue();\n      this.props.filterSubmit(fieldsValue); // 父子组件通信 儿子调用父亲传递的方法\n    };\n\n    this.reset = () => {\n      this.props.form.resetFields();\n    };\n\n    this.initFormList = () => {\n      const getFieldDecorator = this.props.form.getFieldDecorator;\n      const formList = this.props.formList;\n      const formItemList = [];\n\n      if (formList && formList.length > 0) {\n        formList.forEach((item, index) => {\n          let label = item.label;\n          let field = item.field;\n          let initValue = item.initialValue || '';\n          let placeholder = item.placeholder;\n          let width = item.width;\n\n          if (item.type == 'SELECT') {\n            const SELECT = React.createElement(FormItem, {\n              label: label,\n              key: field,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 33\n              },\n              __self: this\n            }, getFieldDecorator([field], {\n              initialValue: initValue\n            })(React.createElement(Select, {\n              style: {\n                width: width\n              },\n              placeholder: placeholder,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 38\n              },\n              __self: this\n            }, Util.getOptionList(item.list))));\n            formItemList.push(SELECT);\n          }\n\n          if (item.type == 'INPUT') {\n            const INPUT = React.createElement(FormItem, {\n              width: width,\n              label: label,\n              key: field,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 52\n              },\n              __self: this\n            }, getFieldDecorator([field], {\n              initialValue: initValue\n            })(React.createElement(INPUT, {\n              type: \"text\",\n              placeholder: placeholder,\n              width: width,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 57\n              },\n              __self: this\n            })));\n            formItemList.push(INPUT);\n          }\n\n          if (item.type == 'CHECKBOX') {\n            const CHECKBOX = React.createElement(FormItem, {\n              label: label,\n              key: field,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 68\n              },\n              __self: this\n            }, getFieldDecorator([field], {\n              initialValue: initValue,\n              // 必须是 true or false\n              valuePropName: 'checked' // 一定要加这个属性\n\n            })(React.createElement(Checkbox, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 74\n              },\n              __self: this\n            }, label)));\n            formItemList.push(CHECKBOX);\n          }\n\n          if (item.type == '时间查询') {\n            const begin_time = React.createElement(FormItem, {\n              label: \"\\u5F00\\u59CB\\u65F6\\u95F4\",\n              key: field,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 83\n              },\n              __self: this\n            }, getFieldDecorator('begin_time', {})(React.createElement(DatePicker, {\n              placeholder: placeholder,\n              showTime: true,\n              format: \"YYYY-MM-DD HH:mm:ss\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 87\n              },\n              __self: this\n            })));\n            formItemList.push(begin_time);\n            const end_time = React.createElement(FormItem, {\n              label: \"~\",\n              colon: false,\n              key: field,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 96\n              },\n              __self: this\n            }, getFieldDecorator('end_time', {})(React.createElement(DatePicker, {\n              placeholder: placeholder,\n              showTime: true,\n              format: \"YYYY-MM-DD HH:mm:ss\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 100\n              },\n              __self: this\n            })));\n            formItemList.push(end_time);\n          }\n        });\n      }\n\n      return formItemList;\n    };\n  }\n\n  render() {\n    return React.createElement(Form, {\n      layout: \"inline\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, this.initFormList(), React.createElement(FormItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"primary\",\n      onClick: this.handleFilterSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"\\u67E5\\u8BE2\"), React.createElement(Button, {\n      onClick: this.reset,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"\\u91CD\\u7F6E\")));\n  }\n\n}\n\nexport default Form.create()(FilterForm);","map":{"version":3,"sources":["/Users/habitat/Desktop/share-bus/src/components/baseform/index.js"],"names":["React","DatePicker","Input","Select","Form","Button","Checkbox","Radio","Util","FormItem","Item","Option","FilterForm","Component","handleFilterSubmit","fieldsValue","props","form","getFieldsValue","filterSubmit","reset","resetFields","initFormList","getFieldDecorator","formList","formItemList","length","forEach","item","index","label","field","initValue","initialValue","placeholder","width","type","SELECT","getOptionList","list","push","INPUT","CHECKBOX","valuePropName","begin_time","end_time","render","create"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {DatePicker, Input, Select, Form, Button, Checkbox, Radio} from \"antd\"\nimport Util from '../../utils/utils'\n\nconst FormItem = Form.Item\nconst Option = Select.Option\n\nclass FilterForm extends React.Component {\n\n  // 绑定过滤方法\n  handleFilterSubmit = () => {\n    let fieldsValue = this.props.form.getFieldsValue()\n    this.props.filterSubmit(fieldsValue) // 父子组件通信 儿子调用父亲传递的方法\n  }\n\n  // 重置\n  reset = () => {\n    this.props.form.resetFields()\n  }\n\n  initFormList = () => {\n    const { getFieldDecorator } = this.props.form\n    const formList = this.props.formList\n    const formItemList = []\n    if (formList && formList.length > 0) {\n      formList.forEach((item, index) => {\n        let label = item.label\n        let field = item.field\n        let initValue = item.initialValue || ''\n        let placeholder = item.placeholder\n        let width = item.width\n        if (item.type == 'SELECT') {\n          const SELECT = <FormItem label={label} key={field} >\n            {\n              getFieldDecorator([field], {\n                initialValue: initValue,\n              })(\n                <Select\n                  style={{width: width}}\n                  placeholder={placeholder}\n                >\n                  {\n                    Util.getOptionList(item.list)\n                  }\n                </Select>\n              )\n            }\n          </FormItem>\n          formItemList.push(SELECT)\n        }\n        if (item.type == 'INPUT') {\n          const INPUT = <FormItem width={width} label={label} key={field} >\n            {\n              getFieldDecorator([field], {\n                initialValue: initValue,\n              })(\n                <INPUT\n                  type='text'\n                  placeholder={placeholder}\n                  width={width}\n                />\n              )\n            }\n          </FormItem>\n          formItemList.push(INPUT)\n        }\n        if (item.type == 'CHECKBOX') {\n          const CHECKBOX = <FormItem label={label} key={field} >\n            {\n              getFieldDecorator([field], {\n                initialValue: initValue, // 必须是 true or false\n                valuePropName: 'checked' // 一定要加这个属性\n              })(\n                <Checkbox >\n                  {label}\n                </Checkbox>\n              )\n            }\n          </FormItem>\n          formItemList.push(CHECKBOX)\n        }\n        if (item.type == '时间查询') {\n          const begin_time = <FormItem label='开始时间' key={field}>\n            {\n              getFieldDecorator('begin_time', {\n              })(\n                <DatePicker\n                  placeholder={placeholder}\n                  showTime={true}\n                  format=\"YYYY-MM-DD HH:mm:ss\"\n                />\n              )\n            }\n          </FormItem>\n          formItemList.push(begin_time)\n          const end_time = <FormItem label=\"~\" colon={false} key={field}>\n            {\n              getFieldDecorator('end_time', {\n              })(\n                <DatePicker\n                  placeholder={placeholder}\n                  showTime={true}\n                  format=\"YYYY-MM-DD HH:mm:ss\"\n                />\n              )\n            }\n          </FormItem>\n          formItemList.push(end_time)\n        }\n      })\n    }\n\n    return formItemList\n  }\n\n  render() {\n    return (\n      <Form layout='inline'>\n        {\n          this.initFormList()\n        }\n        <FormItem>\n          <Button type='primary' onClick={this.handleFilterSubmit}>查询</Button>\n          <Button onClick={this.reset}>重置</Button>\n        </FormItem>\n      </Form>\n    )\n  }\n}\n\nexport default Form.create()(FilterForm)"]},"metadata":{},"sourceType":"module"}