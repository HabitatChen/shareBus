{"ast":null,"code":"var _jsxFileName = \"/Users/habitat/Desktop/share-bus/src/components/baseform/index.js\";\nimport React from 'react';\nimport { Input, Select, Form, Button, Checkbox, Radio } from \"antd\";\nimport Util from '../../utils/utils';\nconst FormItem = Form.Item;\nconst Option = Select.Option;\n\nclass FilterForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.initFormList = () => {\n      const getFieldDecorator = this.form.getFieldDecorator;\n      const formList = this.props.formList;\n\n      if (formList && formList.length > 0) {\n        formList.forEach((item, index) => {\n          let label = item.label;\n          let field = item.field;\n          let initValue = item.initialValue || '';\n          let placeholder = item.placeholder;\n          let width = item.width;\n\n          if (item.type == 'SELECT') {\n            const SELECT = React.createElement(FormItem, {\n              label: label,\n              key: field,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 21\n              },\n              __self: this\n            }, getFieldDecorator([field], {\n              initialValue: initValue\n            })(React.createElement(Select, {\n              placeholder: placeholder,\n              width: width,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 26\n              },\n              __self: this\n            }, Util.getOptionList(item.list))));\n          }\n        });\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Form.create()(FilterForm);","map":{"version":3,"sources":["/Users/habitat/Desktop/share-bus/src/components/baseform/index.js"],"names":["React","Input","Select","Form","Button","Checkbox","Radio","Util","FormItem","Item","Option","FilterForm","Component","initFormList","getFieldDecorator","form","formList","props","length","forEach","item","index","label","field","initValue","initialValue","placeholder","width","type","SELECT","getOptionList","list","render","create"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,KAAR,EAAeC,MAAf,EAAuBC,IAAvB,EAA6BC,MAA7B,EAAqCC,QAArC,EAA+CC,KAA/C,QAA2D,MAA3D;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AAEA,MAAMC,QAAQ,GAAGL,IAAI,CAACM,IAAtB;AACA,MAAMC,MAAM,GAAGR,MAAM,CAACQ,MAAtB;;AAEA,MAAMC,UAAN,SAAyBX,KAAK,CAACY,SAA/B,CAAyC;AAAA;AAAA;;AAAA,SAEvCC,YAFuC,GAExB,MAAM;AAAA,YACXC,iBADW,GACW,KAAKC,IADhB,CACXD,iBADW;AAEnB,YAAME,QAAQ,GAAG,KAAKC,KAAL,CAAWD,QAA5B;;AACA,UAAIA,QAAQ,IAAIA,QAAQ,CAACE,MAAT,GAAkB,CAAlC,EAAqC;AACnCF,QAAAA,QAAQ,CAACG,OAAT,CAAiB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAChC,cAAIC,KAAK,GAAGF,IAAI,CAACE,KAAjB;AACA,cAAIC,KAAK,GAAGH,IAAI,CAACG,KAAjB;AACA,cAAIC,SAAS,GAAGJ,IAAI,CAACK,YAAL,IAAqB,EAArC;AACA,cAAIC,WAAW,GAAGN,IAAI,CAACM,WAAvB;AACA,cAAIC,KAAK,GAAGP,IAAI,CAACO,KAAjB;;AACA,cAAIP,IAAI,CAACQ,IAAL,IAAa,QAAjB,EAA2B;AACzB,kBAAMC,MAAM,GAAG,oBAAC,QAAD;AAAU,cAAA,KAAK,EAAEP,KAAjB;AAAwB,cAAA,GAAG,EAAEC,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAEXT,iBAAiB,CAAC,CAACS,KAAD,CAAD,EAAU;AACzBE,cAAAA,YAAY,EAAED;AADW,aAAV,CAAjB,CAGE,oBAAC,MAAD;AACE,cAAA,WAAW,EAAEE,WADf;AAEE,cAAA,KAAK,EAAEC,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAKIpB,IAAI,CAACuB,aAAL,CAAmBV,IAAI,CAACW,IAAxB,CALJ,CAHF,CAFW,CAAf;AAgBD;AACF,SAxBD;AAyBD;AACF,KAhCsC;AAAA;;AAkCvCC,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAKD;;AAxCsC;;AA2CzC,eAAe7B,IAAI,CAAC8B,MAAL,GAActB,UAAd,CAAf","sourcesContent":["import React from 'react'\nimport {Input, Select, Form, Button, Checkbox, Radio} from \"antd\"\nimport Util from '../../utils/utils'\n\nconst FormItem = Form.Item\nconst Option = Select.Option\n\nclass FilterForm extends React.Component {\n\n  initFormList = () => {\n    const { getFieldDecorator } = this.form\n    const formList = this.props.formList\n    if (formList && formList.length > 0) {\n      formList.forEach((item, index) => {\n        let label = item.label\n        let field = item.field\n        let initValue = item.initialValue || ''\n        let placeholder = item.placeholder\n        let width = item.width\n        if (item.type == 'SELECT') {\n          const SELECT = <FormItem label={label} key={field} >\n            {\n              getFieldDecorator([field], {\n                initialValue: initValue,\n              })(\n                <Select\n                  placeholder={placeholder}\n                  width={width}\n                >\n                  {\n                    Util.getOptionList(item.list)\n                  }\n                </Select>\n              )\n            }\n          </FormItem>\n        }\n      })\n    }\n  }\n\n  render() {\n    return (\n      <Form>\n\n      </Form>\n    )\n  }\n}\n\nexport default Form.create()(FilterForm)"]},"metadata":{},"sourceType":"module"}