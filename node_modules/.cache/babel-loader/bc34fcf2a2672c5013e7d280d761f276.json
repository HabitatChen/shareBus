{"ast":null,"code":"var _jsxFileName = \"/Users/habitat/Desktop/share-bus/src/page/table/highTable.js\";\nimport React from 'react';\nimport { Modal, Card, Table, Button, message } from 'antd';\nimport axios from '../../axios/index';\nimport Utils from '../../utils/utils';\nexport default class HighTable extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      dataSource: [],\n      pagination: {}\n    };\n    this.params = {\n      currentPage: 1 // 调用请求的方法\n\n    };\n\n    this.request = () => {\n      let _this = this;\n\n      axios.ajax({\n        url: '/table/list',\n        data: {\n          params: {\n            page: _this.params.page\n          }\n        }\n      }).then(res => {\n        if (res.code === 0) {\n          res.result.list.map((item, index) => {\n            return item.key === index;\n          });\n          this.setState({\n            dataSource: res.result.list,\n            pagination: Utils.pagination(res, current => {\n              // TODO 获取当前页面 传给接口\n              _this.params.page = current;\n              this.request();\n            })\n          });\n        }\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.request();\n  } // 请求mock数据\n\n\n  render() {\n    const columns = [{\n      title: 'id',\n      // 对应的列名\n      dataIndex: 'id' // 数据源属性值 需要渲染的字段\n\n    }, {\n      title: '用户名',\n      dataIndex: 'userName'\n    }, {\n      title: '性别',\n      dataIndex: 'sex',\n\n      render(sex) {\n        // render 默认接收到dataIndex字段里面到值\n        return sex === 1 ? '男' : '女';\n      }\n\n    }, {\n      title: '状态',\n      dataIndex: 'state',\n\n      render(state) {\n        let config = {\n          '1': 'hello',\n          '2': 'world',\n          '3': 'nihao',\n          '4': '你号么',\n          '5': 'sha diao'\n        };\n        return config[state];\n      }\n\n    }, {\n      title: '爱好',\n      dataIndex: 'interests',\n\n      render(state) {\n        let config = {\n          '1': '游泳',\n          '2': '健身',\n          '3': '🏀',\n          '4': '跑步',\n          '5': '桌球',\n          '6': '爬山',\n          '7': '藏藏个',\n          '8': '你好'\n        };\n        return config[state];\n      }\n\n    }, {\n      title: '生日',\n      dataIndex: 'birthday'\n    }, {\n      title: '地址',\n      dataIndex: 'address'\n    }];\n    const rowCheckSelection = {\n      type: 'checkbox',\n      selectedRowKeys: this.state.selectedRowKeys,\n      onChange: (selectedRowKeys, selectedRows) => {\n        let ids = [];\n        selectedRows.map(item => {\n          ids.push(item.id);\n        }); //  const selectedIds = selectedRows.map(item => {\n        //    return item.id\n        //  })\n\n        console.log('selectedRows');\n        console.log(selectedRows);\n        console.log('record');\n        console.log(this.state.selectedItem);\n        this.setState({\n          selectedRowKeys,\n          // 这个是必须的\n          selectedIds: ids,\n          // 附加的\n          selectedRows: selectedRows // 多选时 把选中的所有数据存起来 方便管理 onRow 会存单条数据\n\n        });\n      }\n    };\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(Card, {\n      title: \"\\u591A\\u9009\\u8868\\u683C - Mock\",\n      style: {\n        marginTop: 20\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(Table, {\n      columns: columns,\n      rowSelection: rowCheckSelection // type(单选或者多选); onSelect(选中之后到回调); onChange(选中的切换回调)\n      ,\n      dataSource: this.state.dataSource,\n      bordered: true,\n      pagination: false,\n      onRow: (record, index) => {\n        return {\n          onClick: () => {\n            // row 当前行被点击之后的回调\n            this.onRowClick(record, index);\n          }\n        };\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/habitat/Desktop/share-bus/src/page/table/highTable.js"],"names":["React","Modal","Card","Table","Button","message","axios","Utils","HighTable","Component","state","dataSource","pagination","params","currentPage","request","_this","ajax","url","data","page","then","res","code","result","list","map","item","index","key","setState","current","componentDidMount","render","columns","title","dataIndex","sex","config","rowCheckSelection","type","selectedRowKeys","onChange","selectedRows","ids","push","id","console","log","selectedItem","selectedIds","marginTop","record","onClick","onRowClick"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Modal, Card, Table, Button, message } from 'antd'\nimport axios from '../../axios/index'\nimport Utils from '../../utils/utils'\n\nexport default class HighTable extends React.Component {\n\n  state = {\n    dataSource: [],\n    pagination: {}\n  }\n\n  params = {\n    currentPage: 1\n  }\n\n  // 调用请求的方法\n  componentDidMount() {\n    this.request()\n  }\n\n  // 请求mock数据\n  request = () => {\n    let _this = this\n    axios.ajax({\n      url: '/table/list',\n      data: {\n        params: {\n          page: _this.params.page\n        }\n      }\n    }).then((res) => {\n      if (res.code === 0) {\n        res.result.list.map((item, index) => {\n          return item.key === index\n        })\n        this.setState({\n          dataSource: res.result.list,\n          pagination: Utils.pagination(res, (current) => {\n            // TODO 获取当前页面 传给接口\n            _this.params.page = current\n            this.request()\n          })\n        })\n      }\n    })\n  }\n\n  render() {\n    const columns = [\n      {\n        title: 'id', // 对应的列名\n        dataIndex: 'id', // 数据源属性值 需要渲染的字段\n      },\n      {\n        title: '用户名',\n        dataIndex: 'userName'\n      },\n      {\n        title: '性别',\n        dataIndex: 'sex',\n        render(sex) { // render 默认接收到dataIndex字段里面到值\n          return sex === 1 ? '男' : '女'\n        }\n      },\n      {\n        title: '状态',\n        dataIndex: 'state',\n        render(state) {\n          let config = {\n            '1': 'hello',\n            '2': 'world',\n            '3': 'nihao',\n            '4': '你号么',\n            '5': 'sha diao'\n          }\n          return config[state]\n        }\n      },\n      {\n        title: '爱好',\n        dataIndex: 'interests',\n        render(state) {\n          let config = {\n            '1': '游泳',\n            '2': '健身',\n            '3': '🏀',\n            '4': '跑步',\n            '5': '桌球',\n            '6': '爬山',\n            '7': '藏藏个',\n            '8': '你好'\n          }\n          return config[state]\n        }\n      },\n      {\n        title: '生日',\n        dataIndex: 'birthday'\n      },\n      {\n        title: '地址',\n        dataIndex: 'address'\n      }\n    ]\n\n    const rowCheckSelection = {\n      type: 'checkbox',\n      selectedRowKeys: this.state.selectedRowKeys,\n      onChange: (selectedRowKeys, selectedRows) => {\n        let ids = []\n        selectedRows.map(item => {\n          ids.push(item.id)\n        })\n        //  const selectedIds = selectedRows.map(item => {\n        //    return item.id\n        //  })\n        console.log('selectedRows')\n        console.log(selectedRows)\n        console.log('record')\n        console.log(this.state.selectedItem)\n        this.setState({\n          selectedRowKeys, // 这个是必须的\n          selectedIds: ids, // 附加的\n          selectedRows: selectedRows // 多选时 把选中的所有数据存起来 方便管理 onRow 会存单条数据\n        })\n      }\n    }\n\n    return (\n      <div>\n        <Card title='多选表格 - Mock' style={{marginTop: 20}}>\n          <Table\n            columns={columns}\n            rowSelection={rowCheckSelection} // type(单选或者多选); onSelect(选中之后到回调); onChange(选中的切换回调)\n            dataSource={this.state.dataSource}\n            bordered\n            pagination={false}\n            onRow={(record, index) => {\n              return {\n                onClick: () => { // row 当前行被点击之后的回调\n                  this.onRowClick(record, index)\n                }\n              }\n            }}\n          />\n\n        </Card>\n      </div>\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}