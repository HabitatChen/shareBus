{"ast":null,"code":"var _jsxFileName = \"/Users/habitat/Desktop/share-bus/src/page/table/highTable.js\";\nimport React from 'react';\nimport { Badge, Modal, Card, Table, Button, message } from 'antd';\nimport axios from '../../axios/index';\nimport Utils from '../../utils/utils';\nexport default class HighTable extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      dataSource: [],\n      pagination: {},\n      selectedRowKeys: [],\n      selectedItem: [],\n      sortOrder: '',\n      selectedRows: []\n    };\n    this.params = {\n      currentPage: 1 // 调用请求的方法\n\n    };\n\n    this.handleTableChange = (pagination, filters, sorter) => {\n      console.log('sorter');\n      console.log(sorter);\n      this.setState({\n        sortOrder: sorter.order\n      });\n    };\n\n    this.handleDelete = item => {\n      let id = item.id;\n      Modal.confirm({\n        title: '确认',\n        content: '您确定要删除此条数据么',\n        onOk: () => {\n          message.success('删除成功');\n          this.request();\n        }\n      });\n    };\n\n    this.onRowClick = (record, index) => {\n      let selectKey = [index]; // 为什么是数组 因为有可能是多选的\n\n      console.log('here console');\n      console.log(selectKey);\n      console.log(record);\n      this.setState({\n        selectedRowKeys: selectKey,\n        // 然后把当前所中的key值和当前选中的内容项保存到state中\n        selectedItem: record\n      });\n    };\n\n    this.request = () => {\n      let _this = this;\n\n      axios.ajax({\n        url: '/table/highTable',\n        data: {\n          params: {\n            page: _this.params.page\n          }\n        }\n      }).then(res => {\n        if (res.code === 0) {\n          res.result.list.map((item, index) => {\n            return item.key === index;\n          });\n          this.setState({\n            dataSource: res.result.list,\n            pagination: Utils.pagination(res, current => {\n              // TODO 获取当前页面 传给接口\n              _this.params.page = current;\n              this.request();\n            })\n          });\n        }\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.request();\n  } // 表格change事件触发\n\n\n  render() {\n    const columns = [{\n      title: 'id',\n      // 对应的列名\n      dataIndex: 'id',\n      // 数据源属性值 需要渲染的字段\n      width: 80\n    }, {\n      title: '用户名',\n      dataIndex: 'userName',\n      width: 80\n    }, {\n      title: '性别',\n      dataIndex: 'sex',\n\n      render(sex) {\n        // render 默认接收到dataIndex字段里面到值\n        return sex === 1 ? '男' : '女';\n      },\n\n      width: 80\n    }, {\n      title: '状态',\n      dataIndex: 'state',\n\n      render(state) {\n        let config = {\n          '1': 'hello',\n          '2': 'world',\n          '3': 'nihao',\n          '4': '你号么',\n          '5': 'sha diao'\n        };\n        return config[state];\n      },\n\n      width: 80\n    }, {\n      title: '爱好',\n      dataIndex: 'interests',\n\n      render(state) {\n        let config = {\n          '1': '游泳',\n          '2': '健身',\n          '3': '🏀',\n          '4': '跑步',\n          '5': '桌球',\n          '6': '爬山',\n          '7': '藏藏个',\n          '8': '你好'\n        };\n        return config[state];\n      },\n\n      width: 80\n    }, {\n      title: '生日',\n      dataIndex: 'birthday',\n      width: 120\n    }, {\n      title: '地址',\n      dataIndex: 'address',\n      width: 120\n    }];\n    const columns2 = [{\n      title: 'id',\n      // 对应的列名\n      dataIndex: 'id',\n      // 数据源属性值 需要渲染的字段\n      width: 80\n    }, {\n      title: '用户名',\n      dataIndex: 'userName',\n      width: 80\n    }, {\n      title: '年龄',\n      dataIndex: 'age',\n      sorter: (a, b) => {\n        // a, b 是列的字段 通过a.age 可以获得a中的age值\n        return a.age - b.age;\n      },\n      sortOrder: this.state.sortOrder,\n      width: 80\n    }, {\n      title: '性别',\n      dataIndex: 'sex',\n\n      render(sex) {\n        // render 默认接收到dataIndex字段里面到值\n        return sex === 1 ? '男' : '女';\n      },\n\n      width: 80\n    }, {\n      title: '状态',\n      dataIndex: 'state',\n\n      render(state) {\n        let config = {\n          '1': 'hello',\n          '2': 'world',\n          '3': 'nihao',\n          '4': '你号么',\n          '5': 'sha diao'\n        };\n        return config[state];\n      },\n\n      width: 80\n    }, {\n      title: '爱好',\n      dataIndex: 'interests',\n\n      render(state) {\n        let config = {\n          '1': '游泳',\n          '2': '健身',\n          '3': '🏀',\n          '4': '跑步',\n          '5': '桌球',\n          '6': '爬山',\n          '7': '藏藏个',\n          '8': '你好'\n        };\n        return config[state];\n      },\n\n      width: 80\n    }, {\n      title: '生日',\n      dataIndex: 'birthday',\n      width: 120\n    }, {\n      title: '地址',\n      dataIndex: 'address',\n      width: 120\n    }];\n    const columns3 = [{\n      title: 'id',\n      // 对应的列名\n      dataIndex: 'id',\n      // 数据源属性值 需要渲染的字段\n      width: 80\n    }, {\n      title: '用户名',\n      dataIndex: 'userName',\n      width: 80\n    }, {\n      title: '年龄',\n      dataIndex: 'age',\n      width: 80\n    }, {\n      title: '性别',\n      dataIndex: 'sex',\n\n      render(sex) {\n        // render 默认接收到dataIndex字段里面到值\n        return sex === 1 ? '男' : '女';\n      },\n\n      width: 80\n    }, {\n      title: '状态',\n      dataIndex: 'state',\n\n      render(state) {\n        let config = {\n          '1': 'hello',\n          '2': 'world',\n          '3': 'nihao',\n          '4': '你号么',\n          '5': 'sha diao'\n        };\n        return config[state];\n      },\n\n      width: 80\n    }, {\n      title: '爱好',\n      dataIndex: 'interests',\n\n      render(interests) {\n        let config = {\n          '1': React.createElement(Badge, {\n            status: \"success\",\n            text: \"\\u6E38\\u6CF3\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 267\n            },\n            __self: this\n          }),\n          '2': React.createElement(Badge, {\n            status: \"error\",\n            text: \"\\u5065\\u8EAB\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 268\n            },\n            __self: this\n          }),\n          '3': React.createElement(Badge, {\n            status: \"default\",\n            text: \"\\uD83C\\uDFC0\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 269\n            },\n            __self: this\n          }),\n          '4': React.createElement(Badge, {\n            status: \"warning\",\n            text: \"\\u8DD1\\u6B65\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 270\n            },\n            __self: this\n          }),\n          '5': React.createElement(Badge, {\n            status: \"success\",\n            text: \"\\u9A91\\u884C\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 271\n            },\n            __self: this\n          }),\n          '6': React.createElement(Badge, {\n            status: \"success\",\n            text: \"\\u4F60\\u597D\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 272\n            },\n            __self: this\n          }),\n          '7': React.createElement(Badge, {\n            status: \"success\",\n            text: \"\\u6E38\\u6CF3\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 273\n            },\n            __self: this\n          }),\n          '8': React.createElement(Badge, {\n            status: \"success\",\n            text: \"\\u6816\\u606F\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 274\n            },\n            __self: this\n          })\n        };\n        return config[interests];\n      },\n\n      width: 80\n    }, {\n      title: '生日',\n      dataIndex: 'birthday',\n      width: 120\n    }, {\n      title: '操作',\n      width: 120,\n\n      render(text, item) {\n        return React.createElement(\"a\", {\n          href: \"#\",\n          onClick: item => {\n            this.handleDelete(item);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 289\n          },\n          __self: this\n        }, \"\\u5220\\u9664\");\n      }\n\n    }];\n    const rowCheckSelection = {\n      type: 'checkbox',\n      selectedRowKeys: this.state.selectedRowKeys,\n      onChange: (selectedRowKeys, selectedRows) => {\n        let ids = [];\n        selectedRows.map(item => {\n          ids.push(item.id);\n        }); //  const selectedIds = selectedRows.map(item => {\n        //    return item.id\n        //  })\n\n        console.log('selectedRows');\n        console.log(selectedRows);\n        console.log('record');\n        console.log(this.state.selectedItem);\n        this.setState({\n          selectedRowKeys,\n          // 这个是必须的\n          selectedIds: ids,\n          // 附加的\n          selectedRows: selectedRows // 多选时 把选中的所有数据存起来 方便管理 onRow 会存单条数据\n\n        });\n      }\n    };\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }, React.createElement(Card, {\n      title: \"\\u5934\\u90E8\\u56FA\\u5B9A\",\n      style: {\n        marginTop: 20\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    }, React.createElement(Table, {\n      columns: columns,\n      rowSelection: rowCheckSelection // type(单选或者多选); onSelect(选中之后到回调); onChange(选中的切换回调)\n      ,\n      dataSource: this.state.dataSource,\n      bordered: true,\n      scroll: {\n        y: 240\n      },\n      pagination: false,\n      onRow: (record, index) => {\n        return {\n          onClick: () => {\n            // row 当前行被点击之后的回调\n            this.onRowClick(record, index);\n          }\n        };\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    })), React.createElement(Card, {\n      title: \"\\u5DE6\\u4FA7\\u56FA\\u5B9A\",\n      style: {\n        marginTop: 20\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    }, React.createElement(Table, {\n      columns: columns,\n      rowSelection: rowCheckSelection // type(单选或者多选); onSelect(选中之后到回调); onChange(选中的切换回调)\n      ,\n      dataSource: this.state.dataSource,\n      bordered: true,\n      pagination: false,\n      onRow: (record, index) => {\n        return {\n          onClick: () => {\n            // row 当前行被点击之后的回调\n            this.onRowClick(record, index);\n          }\n        };\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    })), React.createElement(Card, {\n      title: \"\\u8868\\u683C\\u6392\\u5E8F\",\n      style: {\n        marginTop: 20\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354\n      },\n      __self: this\n    }, React.createElement(Table, {\n      columns: columns2,\n      rowSelection: rowCheckSelection // type(单选或者多选); onSelect(选中之后到回调); onChange(选中的切换回调)\n      ,\n      dataSource: this.state.dataSource,\n      bordered: true,\n      pagination: false,\n      onRow: (record, index) => {\n        return {\n          onClick: () => {\n            // row 当前行被点击之后的回调\n            this.onRowClick(record, index);\n          }\n        };\n      },\n      onChange: this.handleTableChange // 分页、排序、 筛选时发生变化的回调\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355\n      },\n      __self: this\n    })), React.createElement(Card, {\n      title: \"\\u64CD\\u4F5C\\u6309\\u94AE\",\n      style: {\n        marginTop: 20\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372\n      },\n      __self: this\n    }, React.createElement(Table, {\n      columns: columns3,\n      rowSelection: rowCheckSelection // type(单选或者多选); onSelect(选中之后到回调); onChange(选中的切换回调)\n      ,\n      dataSource: this.state.dataSource,\n      bordered: true,\n      pagination: false,\n      onRow: (record, index) => {\n        return {\n          onClick: () => {\n            // row 当前行被点击之后的回调\n            this.onRowClick(record, index);\n          }\n        };\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/habitat/Desktop/share-bus/src/page/table/highTable.js"],"names":["React","Badge","Modal","Card","Table","Button","message","axios","Utils","HighTable","Component","state","dataSource","pagination","selectedRowKeys","selectedItem","sortOrder","selectedRows","params","currentPage","handleTableChange","filters","sorter","console","log","setState","order","handleDelete","item","id","confirm","title","content","onOk","success","request","onRowClick","record","index","selectKey","_this","ajax","url","data","page","then","res","code","result","list","map","key","current","componentDidMount","render","columns","dataIndex","width","sex","config","columns2","a","b","age","columns3","interests","text","rowCheckSelection","type","onChange","ids","push","selectedIds","marginTop","y","onClick"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,KAAhB,EAAuBC,IAAvB,EAA6BC,KAA7B,EAAoCC,MAApC,EAA4CC,OAA5C,QAA2D,MAA3D;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AAEA,eAAe,MAAMC,SAAN,SAAwBT,KAAK,CAACU,SAA9B,CAAwC;AAAA;AAAA;AAAA,SAErDC,KAFqD,GAE7C;AACNC,MAAAA,UAAU,EAAE,EADN;AAENC,MAAAA,UAAU,EAAE,EAFN;AAGNC,MAAAA,eAAe,EAAE,EAHX;AAINC,MAAAA,YAAY,EAAE,EAJR;AAKNC,MAAAA,SAAS,EAAE,EALL;AAMNC,MAAAA,YAAY,EAAE;AANR,KAF6C;AAAA,SAWrDC,MAXqD,GAW5C;AACPC,MAAAA,WAAW,EAAE,CADN,CAIT;;AAJS,KAX4C;;AAAA,SAqBrDC,iBArBqD,GAqBjC,CAACP,UAAD,EAAaQ,OAAb,EAAsBC,MAAtB,KAAiC;AACnDC,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,WAAKG,QAAL,CAAc;AACZT,QAAAA,SAAS,EAAEM,MAAM,CAACI;AADN,OAAd;AAGD,KA3BoD;;AAAA,SA8BrDC,YA9BqD,GA8BrCC,IAAD,IAAU;AACvB,UAAIC,EAAE,GAAGD,IAAI,CAACC,EAAd;AACA3B,MAAAA,KAAK,CAAC4B,OAAN,CAAc;AACZC,QAAAA,KAAK,EAAE,IADK;AAEZC,QAAAA,OAAO,EAAE,aAFG;AAGZC,QAAAA,IAAI,EAAE,MAAM;AACV3B,UAAAA,OAAO,CAAC4B,OAAR,CAAgB,MAAhB;AACA,eAAKC,OAAL;AACD;AANW,OAAd;AAQD,KAxCoD;;AAAA,SA2CrDC,UA3CqD,GA2CxC,CAACC,MAAD,EAASC,KAAT,KAAmB;AAC9B,UAAIC,SAAS,GAAG,CAACD,KAAD,CAAhB,CAD8B,CACL;;AACzBf,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYe,SAAZ;AACAhB,MAAAA,OAAO,CAACC,GAAR,CAAYa,MAAZ;AACA,WAAKZ,QAAL,CAAc;AACZX,QAAAA,eAAe,EAAEyB,SADL;AACgB;AAC5BxB,QAAAA,YAAY,EAAEsB;AAFF,OAAd;AAID,KApDoD;;AAAA,SAuDrDF,OAvDqD,GAuD3C,MAAM;AACd,UAAIK,KAAK,GAAG,IAAZ;;AACAjC,MAAAA,KAAK,CAACkC,IAAN,CAAW;AACTC,QAAAA,GAAG,EAAE,kBADI;AAETC,QAAAA,IAAI,EAAE;AACJzB,UAAAA,MAAM,EAAE;AACN0B,YAAAA,IAAI,EAAEJ,KAAK,CAACtB,MAAN,CAAa0B;AADb;AADJ;AAFG,OAAX,EAOGC,IAPH,CAOSC,GAAD,IAAS;AACf,YAAIA,GAAG,CAACC,IAAJ,KAAa,CAAjB,EAAoB;AAClBD,UAAAA,GAAG,CAACE,MAAJ,CAAWC,IAAX,CAAgBC,GAAhB,CAAoB,CAACtB,IAAD,EAAOU,KAAP,KAAiB;AACnC,mBAAOV,IAAI,CAACuB,GAAL,KAAab,KAApB;AACD,WAFD;AAGA,eAAKb,QAAL,CAAc;AACZb,YAAAA,UAAU,EAAEkC,GAAG,CAACE,MAAJ,CAAWC,IADX;AAEZpC,YAAAA,UAAU,EAAEL,KAAK,CAACK,UAAN,CAAiBiC,GAAjB,EAAuBM,OAAD,IAAa;AAC7C;AACAZ,cAAAA,KAAK,CAACtB,MAAN,CAAa0B,IAAb,GAAoBQ,OAApB;AACA,mBAAKjB,OAAL;AACD,aAJW;AAFA,WAAd;AAQD;AACF,OArBD;AAsBD,KA/EoD;AAAA;;AAgBrDkB,EAAAA,iBAAiB,GAAG;AAClB,SAAKlB,OAAL;AACD,GAlBoD,CAoBrD;;;AA6DAmB,EAAAA,MAAM,GAAG;AACP,UAAMC,OAAO,GAAG,CACd;AACExB,MAAAA,KAAK,EAAE,IADT;AACe;AACbyB,MAAAA,SAAS,EAAE,IAFb;AAEmB;AACjBC,MAAAA,KAAK,EAAE;AAHT,KADc,EAMd;AACE1B,MAAAA,KAAK,EAAE,KADT;AAEEyB,MAAAA,SAAS,EAAE,UAFb;AAGEC,MAAAA,KAAK,EAAE;AAHT,KANc,EAWd;AACE1B,MAAAA,KAAK,EAAE,IADT;AAEEyB,MAAAA,SAAS,EAAE,KAFb;;AAGEF,MAAAA,MAAM,CAACI,GAAD,EAAM;AAAE;AACZ,eAAOA,GAAG,KAAK,CAAR,GAAY,GAAZ,GAAkB,GAAzB;AACD,OALH;;AAMED,MAAAA,KAAK,EAAE;AANT,KAXc,EAmBd;AACE1B,MAAAA,KAAK,EAAE,IADT;AAEEyB,MAAAA,SAAS,EAAE,OAFb;;AAGEF,MAAAA,MAAM,CAAC3C,KAAD,EAAQ;AACZ,YAAIgD,MAAM,GAAG;AACX,eAAK,OADM;AAEX,eAAK,OAFM;AAGX,eAAK,OAHM;AAIX,eAAK,KAJM;AAKX,eAAK;AALM,SAAb;AAOA,eAAOA,MAAM,CAAChD,KAAD,CAAb;AACD,OAZH;;AAaE8C,MAAAA,KAAK,EAAE;AAbT,KAnBc,EAkCd;AACE1B,MAAAA,KAAK,EAAE,IADT;AAEEyB,MAAAA,SAAS,EAAE,WAFb;;AAGEF,MAAAA,MAAM,CAAC3C,KAAD,EAAQ;AACZ,YAAIgD,MAAM,GAAG;AACX,eAAK,IADM;AAEX,eAAK,IAFM;AAGX,eAAK,IAHM;AAIX,eAAK,IAJM;AAKX,eAAK,IALM;AAMX,eAAK,IANM;AAOX,eAAK,KAPM;AAQX,eAAK;AARM,SAAb;AAUA,eAAOA,MAAM,CAAChD,KAAD,CAAb;AACD,OAfH;;AAgBE8C,MAAAA,KAAK,EAAE;AAhBT,KAlCc,EAoDd;AACE1B,MAAAA,KAAK,EAAE,IADT;AAEEyB,MAAAA,SAAS,EAAE,UAFb;AAGEC,MAAAA,KAAK,EAAE;AAHT,KApDc,EAyDd;AACE1B,MAAAA,KAAK,EAAE,IADT;AAEEyB,MAAAA,SAAS,EAAE,SAFb;AAGEC,MAAAA,KAAK,EAAE;AAHT,KAzDc,CAAhB;AA+DA,UAAMG,QAAQ,GAAG,CACf;AACE7B,MAAAA,KAAK,EAAE,IADT;AACe;AACbyB,MAAAA,SAAS,EAAE,IAFb;AAEmB;AACjBC,MAAAA,KAAK,EAAE;AAHT,KADe,EAMf;AACE1B,MAAAA,KAAK,EAAE,KADT;AAEEyB,MAAAA,SAAS,EAAE,UAFb;AAGEC,MAAAA,KAAK,EAAE;AAHT,KANe,EAWf;AACE1B,MAAAA,KAAK,EAAE,IADT;AAEEyB,MAAAA,SAAS,EAAE,KAFb;AAGElC,MAAAA,MAAM,EAAE,CAACuC,CAAD,EAAIC,CAAJ,KAAU;AAAE;AAClB,eAAOD,CAAC,CAACE,GAAF,GAAQD,CAAC,CAACC,GAAjB;AACD,OALH;AAME/C,MAAAA,SAAS,EAAE,KAAKL,KAAL,CAAWK,SANxB;AAOEyC,MAAAA,KAAK,EAAE;AAPT,KAXe,EAoBf;AACE1B,MAAAA,KAAK,EAAE,IADT;AAEEyB,MAAAA,SAAS,EAAE,KAFb;;AAGEF,MAAAA,MAAM,CAACI,GAAD,EAAM;AAAE;AACZ,eAAOA,GAAG,KAAK,CAAR,GAAY,GAAZ,GAAkB,GAAzB;AACD,OALH;;AAMED,MAAAA,KAAK,EAAE;AANT,KApBe,EA4Bf;AACE1B,MAAAA,KAAK,EAAE,IADT;AAEEyB,MAAAA,SAAS,EAAE,OAFb;;AAGEF,MAAAA,MAAM,CAAC3C,KAAD,EAAQ;AACZ,YAAIgD,MAAM,GAAG;AACX,eAAK,OADM;AAEX,eAAK,OAFM;AAGX,eAAK,OAHM;AAIX,eAAK,KAJM;AAKX,eAAK;AALM,SAAb;AAOA,eAAOA,MAAM,CAAChD,KAAD,CAAb;AACD,OAZH;;AAaE8C,MAAAA,KAAK,EAAE;AAbT,KA5Be,EA2Cf;AACE1B,MAAAA,KAAK,EAAE,IADT;AAEEyB,MAAAA,SAAS,EAAE,WAFb;;AAGEF,MAAAA,MAAM,CAAC3C,KAAD,EAAQ;AACZ,YAAIgD,MAAM,GAAG;AACX,eAAK,IADM;AAEX,eAAK,IAFM;AAGX,eAAK,IAHM;AAIX,eAAK,IAJM;AAKX,eAAK,IALM;AAMX,eAAK,IANM;AAOX,eAAK,KAPM;AAQX,eAAK;AARM,SAAb;AAUA,eAAOA,MAAM,CAAChD,KAAD,CAAb;AACD,OAfH;;AAgBE8C,MAAAA,KAAK,EAAE;AAhBT,KA3Ce,EA6Df;AACE1B,MAAAA,KAAK,EAAE,IADT;AAEEyB,MAAAA,SAAS,EAAE,UAFb;AAGEC,MAAAA,KAAK,EAAE;AAHT,KA7De,EAkEf;AACE1B,MAAAA,KAAK,EAAE,IADT;AAEEyB,MAAAA,SAAS,EAAE,SAFb;AAGEC,MAAAA,KAAK,EAAE;AAHT,KAlEe,CAAjB;AAwEA,UAAMO,QAAQ,GAAG,CACf;AACEjC,MAAAA,KAAK,EAAE,IADT;AACe;AACbyB,MAAAA,SAAS,EAAE,IAFb;AAEmB;AACjBC,MAAAA,KAAK,EAAE;AAHT,KADe,EAMf;AACE1B,MAAAA,KAAK,EAAE,KADT;AAEEyB,MAAAA,SAAS,EAAE,UAFb;AAGEC,MAAAA,KAAK,EAAE;AAHT,KANe,EAWf;AACE1B,MAAAA,KAAK,EAAE,IADT;AAEEyB,MAAAA,SAAS,EAAE,KAFb;AAGEC,MAAAA,KAAK,EAAE;AAHT,KAXe,EAgBf;AACE1B,MAAAA,KAAK,EAAE,IADT;AAEEyB,MAAAA,SAAS,EAAE,KAFb;;AAGEF,MAAAA,MAAM,CAACI,GAAD,EAAM;AAAE;AACZ,eAAOA,GAAG,KAAK,CAAR,GAAY,GAAZ,GAAkB,GAAzB;AACD,OALH;;AAMED,MAAAA,KAAK,EAAE;AANT,KAhBe,EAwBf;AACE1B,MAAAA,KAAK,EAAE,IADT;AAEEyB,MAAAA,SAAS,EAAE,OAFb;;AAGEF,MAAAA,MAAM,CAAC3C,KAAD,EAAQ;AACZ,YAAIgD,MAAM,GAAG;AACX,eAAK,OADM;AAEX,eAAK,OAFM;AAGX,eAAK,OAHM;AAIX,eAAK,KAJM;AAKX,eAAK;AALM,SAAb;AAOA,eAAOA,MAAM,CAAChD,KAAD,CAAb;AACD,OAZH;;AAaE8C,MAAAA,KAAK,EAAE;AAbT,KAxBe,EAuCf;AACE1B,MAAAA,KAAK,EAAE,IADT;AAEEyB,MAAAA,SAAS,EAAE,WAFb;;AAGEF,MAAAA,MAAM,CAACW,SAAD,EAAY;AAChB,YAAIN,MAAM,GAAG;AACX,eAAK,oBAAC,KAAD;AAAO,YAAA,MAAM,EAAC,SAAd;AAAwB,YAAA,IAAI,EAAC,cAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADM;AAEX,eAAK,oBAAC,KAAD;AAAO,YAAA,MAAM,EAAC,OAAd;AAAsB,YAAA,IAAI,EAAC,cAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFM;AAGX,eAAK,oBAAC,KAAD;AAAO,YAAA,MAAM,EAAC,SAAd;AAAwB,YAAA,IAAI,EAAC,cAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHM;AAIX,eAAK,oBAAC,KAAD;AAAO,YAAA,MAAM,EAAC,SAAd;AAAwB,YAAA,IAAI,EAAC,cAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJM;AAKX,eAAK,oBAAC,KAAD;AAAO,YAAA,MAAM,EAAC,SAAd;AAAwB,YAAA,IAAI,EAAC,cAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALM;AAMX,eAAK,oBAAC,KAAD;AAAO,YAAA,MAAM,EAAC,SAAd;AAAwB,YAAA,IAAI,EAAC,cAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YANM;AAOX,eAAK,oBAAC,KAAD;AAAO,YAAA,MAAM,EAAC,SAAd;AAAwB,YAAA,IAAI,EAAC,cAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPM;AAQX,eAAK,oBAAC,KAAD;AAAO,YAAA,MAAM,EAAC,SAAd;AAAwB,YAAA,IAAI,EAAC,cAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AARM,SAAb;AAUA,eAAOA,MAAM,CAACM,SAAD,CAAb;AACD,OAfH;;AAgBER,MAAAA,KAAK,EAAE;AAhBT,KAvCe,EAyDf;AACE1B,MAAAA,KAAK,EAAE,IADT;AAEEyB,MAAAA,SAAS,EAAE,UAFb;AAGEC,MAAAA,KAAK,EAAE;AAHT,KAzDe,EA8Df;AACE1B,MAAAA,KAAK,EAAE,IADT;AAEE0B,MAAAA,KAAK,EAAE,GAFT;;AAGEH,MAAAA,MAAM,CAACY,IAAD,EAAOtC,IAAP,EAAa;AACjB,eAAO;AAAG,UAAA,IAAI,EAAC,GAAR;AAAY,UAAA,OAAO,EAAGA,IAAD,IAAU;AAAC,iBAAKD,YAAL,CAAkBC,IAAlB;AAAwB,WAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAP;AACD;;AALH,KA9De,CAAjB;AAuEA,UAAMuC,iBAAiB,GAAG;AACxBC,MAAAA,IAAI,EAAE,UADkB;AAExBtD,MAAAA,eAAe,EAAE,KAAKH,KAAL,CAAWG,eAFJ;AAGxBuD,MAAAA,QAAQ,EAAE,CAACvD,eAAD,EAAkBG,YAAlB,KAAmC;AAC3C,YAAIqD,GAAG,GAAG,EAAV;AACArD,QAAAA,YAAY,CAACiC,GAAb,CAAiBtB,IAAI,IAAI;AACvB0C,UAAAA,GAAG,CAACC,IAAJ,CAAS3C,IAAI,CAACC,EAAd;AACD,SAFD,EAF2C,CAK3C;AACA;AACA;;AACAN,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAYP,YAAZ;AACAM,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKb,KAAL,CAAWI,YAAvB;AACA,aAAKU,QAAL,CAAc;AACZX,UAAAA,eADY;AACK;AACjB0D,UAAAA,WAAW,EAAEF,GAFD;AAEM;AAClBrD,UAAAA,YAAY,EAAEA,YAHF,CAGe;;AAHf,SAAd;AAKD;AApBuB,KAA1B;AAuBA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAC,0BAAZ;AAAmB,MAAA,KAAK,EAAE;AAACwD,QAAAA,SAAS,EAAE;AAAZ,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AACE,MAAA,OAAO,EAAElB,OADX;AAEE,MAAA,YAAY,EAAEY,iBAFhB,CAEmC;AAFnC;AAGE,MAAA,UAAU,EAAE,KAAKxD,KAAL,CAAWC,UAHzB;AAIE,MAAA,QAAQ,MAJV;AAKE,MAAA,MAAM,EAAE;AAAC8D,QAAAA,CAAC,EAAE;AAAJ,OALV;AAME,MAAA,UAAU,EAAE,KANd;AAOE,MAAA,KAAK,EAAE,CAACrC,MAAD,EAASC,KAAT,KAAmB;AACxB,eAAO;AACLqC,UAAAA,OAAO,EAAE,MAAM;AAAE;AACf,iBAAKvC,UAAL,CAAgBC,MAAhB,EAAwBC,KAAxB;AACD;AAHI,SAAP;AAKD,OAbH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,EAmBE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAC,0BAAZ;AAAmB,MAAA,KAAK,EAAE;AAACmC,QAAAA,SAAS,EAAE;AAAZ,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AACE,MAAA,OAAO,EAAElB,OADX;AAEE,MAAA,YAAY,EAAEY,iBAFhB,CAEmC;AAFnC;AAGE,MAAA,UAAU,EAAE,KAAKxD,KAAL,CAAWC,UAHzB;AAIE,MAAA,QAAQ,MAJV;AAKE,MAAA,UAAU,EAAE,KALd;AAME,MAAA,KAAK,EAAE,CAACyB,MAAD,EAASC,KAAT,KAAmB;AACxB,eAAO;AACLqC,UAAAA,OAAO,EAAE,MAAM;AAAE;AACf,iBAAKvC,UAAL,CAAgBC,MAAhB,EAAwBC,KAAxB;AACD;AAHI,SAAP;AAKD,OAZH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAnBF,EAoCE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAC,0BAAZ;AAAmB,MAAA,KAAK,EAAE;AAACmC,QAAAA,SAAS,EAAE;AAAZ,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AACE,MAAA,OAAO,EAAEb,QADX;AAEE,MAAA,YAAY,EAAEO,iBAFhB,CAEmC;AAFnC;AAGE,MAAA,UAAU,EAAE,KAAKxD,KAAL,CAAWC,UAHzB;AAIE,MAAA,QAAQ,MAJV;AAKE,MAAA,UAAU,EAAE,KALd;AAME,MAAA,KAAK,EAAE,CAACyB,MAAD,EAASC,KAAT,KAAmB;AACxB,eAAO;AACLqC,UAAAA,OAAO,EAAE,MAAM;AAAE;AACf,iBAAKvC,UAAL,CAAgBC,MAAhB,EAAwBC,KAAxB;AACD;AAHI,SAAP;AAKD,OAZH;AAaE,MAAA,QAAQ,EAAE,KAAKlB,iBAbjB,CAaoC;AAbpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CApCF,EAsDE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAC,0BAAZ;AAAmB,MAAA,KAAK,EAAE;AAACqD,QAAAA,SAAS,EAAE;AAAZ,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AACE,MAAA,OAAO,EAAET,QADX;AAEE,MAAA,YAAY,EAAEG,iBAFhB,CAEmC;AAFnC;AAGE,MAAA,UAAU,EAAE,KAAKxD,KAAL,CAAWC,UAHzB;AAIE,MAAA,QAAQ,MAJV;AAKE,MAAA,UAAU,EAAE,KALd;AAME,MAAA,KAAK,EAAE,CAACyB,MAAD,EAASC,KAAT,KAAmB;AACxB,eAAO;AACLqC,UAAAA,OAAO,EAAE,MAAM;AAAE;AACf,iBAAKvC,UAAL,CAAgBC,MAAhB,EAAwBC,KAAxB;AACD;AAHI,SAAP;AAKD,OAZH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAtDF,CADF;AA0ED;;AAjYoD","sourcesContent":["import React from 'react'\nimport { Badge, Modal, Card, Table, Button, message } from 'antd'\nimport axios from '../../axios/index'\nimport Utils from '../../utils/utils'\n\nexport default class HighTable extends React.Component {\n\n  state = {\n    dataSource: [],\n    pagination: {},\n    selectedRowKeys: [],\n    selectedItem: [],\n    sortOrder: '',\n    selectedRows: [],\n  }\n\n  params = {\n    currentPage: 1\n  }\n\n  // 调用请求的方法\n  componentDidMount() {\n    this.request()\n  }\n\n  // 表格change事件触发\n  handleTableChange = (pagination, filters, sorter) => {\n    console.log('sorter')\n    console.log(sorter)\n    this.setState({\n      sortOrder: sorter.order\n    })\n  }\n\n  // table 中删除按钮\n  handleDelete = (item) => {\n    let id = item.id\n    Modal.confirm({\n      title: '确认',\n      content: '您确定要删除此条数据么',\n      onOk: () => {\n        message.success('删除成功')\n        this.request()\n      }\n    })\n  }\n\n  // 点击表格单行数据\n  onRowClick = (record, index) => {\n    let selectKey = [index]; // 为什么是数组 因为有可能是多选的\n    console.log('here console')\n    console.log(selectKey)\n    console.log(record)\n    this.setState({\n      selectedRowKeys: selectKey, // 然后把当前所中的key值和当前选中的内容项保存到state中\n      selectedItem: record\n    })\n  }\n\n  // 请求mock数据\n  request = () => {\n    let _this = this\n    axios.ajax({\n      url: '/table/highTable',\n      data: {\n        params: {\n          page: _this.params.page\n        }\n      }\n    }).then((res) => {\n      if (res.code === 0) {\n        res.result.list.map((item, index) => {\n          return item.key === index\n        })\n        this.setState({\n          dataSource: res.result.list,\n          pagination: Utils.pagination(res, (current) => {\n            // TODO 获取当前页面 传给接口\n            _this.params.page = current\n            this.request()\n          })\n        })\n      }\n    })\n  }\n\n  render() {\n    const columns = [\n      {\n        title: 'id', // 对应的列名\n        dataIndex: 'id', // 数据源属性值 需要渲染的字段\n        width: 80\n      },\n      {\n        title: '用户名',\n        dataIndex: 'userName',\n        width: 80\n      },\n      {\n        title: '性别',\n        dataIndex: 'sex',\n        render(sex) { // render 默认接收到dataIndex字段里面到值\n          return sex === 1 ? '男' : '女'\n        },\n        width: 80\n      },\n      {\n        title: '状态',\n        dataIndex: 'state',\n        render(state) {\n          let config = {\n            '1': 'hello',\n            '2': 'world',\n            '3': 'nihao',\n            '4': '你号么',\n            '5': 'sha diao'\n          }\n          return config[state]\n        },\n        width: 80\n      },\n      {\n        title: '爱好',\n        dataIndex: 'interests',\n        render(state) {\n          let config = {\n            '1': '游泳',\n            '2': '健身',\n            '3': '🏀',\n            '4': '跑步',\n            '5': '桌球',\n            '6': '爬山',\n            '7': '藏藏个',\n            '8': '你好'\n          }\n          return config[state]\n        },\n        width: 80\n      },\n      {\n        title: '生日',\n        dataIndex: 'birthday',\n        width: 120\n      },\n      {\n        title: '地址',\n        dataIndex: 'address',\n        width: 120\n      }\n    ]\n    const columns2 = [\n      {\n        title: 'id', // 对应的列名\n        dataIndex: 'id', // 数据源属性值 需要渲染的字段\n        width: 80\n      },\n      {\n        title: '用户名',\n        dataIndex: 'userName',\n        width: 80\n      },\n      {\n        title: '年龄',\n        dataIndex: 'age',\n        sorter: (a, b) => { // a, b 是列的字段 通过a.age 可以获得a中的age值\n          return a.age - b.age\n        },\n        sortOrder: this.state.sortOrder,\n        width: 80\n      },\n      {\n        title: '性别',\n        dataIndex: 'sex',\n        render(sex) { // render 默认接收到dataIndex字段里面到值\n          return sex === 1 ? '男' : '女'\n        },\n        width: 80\n      },\n      {\n        title: '状态',\n        dataIndex: 'state',\n        render(state) {\n          let config = {\n            '1': 'hello',\n            '2': 'world',\n            '3': 'nihao',\n            '4': '你号么',\n            '5': 'sha diao'\n          }\n          return config[state]\n        },\n        width: 80\n      },\n      {\n        title: '爱好',\n        dataIndex: 'interests',\n        render(state) {\n          let config = {\n            '1': '游泳',\n            '2': '健身',\n            '3': '🏀',\n            '4': '跑步',\n            '5': '桌球',\n            '6': '爬山',\n            '7': '藏藏个',\n            '8': '你好'\n          }\n          return config[state]\n        },\n        width: 80\n      },\n      {\n        title: '生日',\n        dataIndex: 'birthday',\n        width: 120\n      },\n      {\n        title: '地址',\n        dataIndex: 'address',\n        width: 120\n      }\n    ]\n    const columns3 = [\n      {\n        title: 'id', // 对应的列名\n        dataIndex: 'id', // 数据源属性值 需要渲染的字段\n        width: 80\n      },\n      {\n        title: '用户名',\n        dataIndex: 'userName',\n        width: 80\n      },\n      {\n        title: '年龄',\n        dataIndex: 'age',\n        width: 80\n      },\n      {\n        title: '性别',\n        dataIndex: 'sex',\n        render(sex) { // render 默认接收到dataIndex字段里面到值\n          return sex === 1 ? '男' : '女'\n        },\n        width: 80\n      },\n      {\n        title: '状态',\n        dataIndex: 'state',\n        render(state) {\n          let config = {\n            '1': 'hello',\n            '2': 'world',\n            '3': 'nihao',\n            '4': '你号么',\n            '5': 'sha diao'\n          }\n          return config[state]\n        },\n        width: 80\n      },\n      {\n        title: '爱好',\n        dataIndex: 'interests',\n        render(interests) {\n          let config = {\n            '1': <Badge status='success' text='游泳' />,\n            '2': <Badge status='error' text='健身' />,\n            '3': <Badge status='default' text='🏀' />,\n            '4': <Badge status='warning' text='跑步' />,\n            '5': <Badge status='success' text='骑行' />,\n            '6': <Badge status='success' text='你好' />,\n            '7': <Badge status='success' text='游泳' />,\n            '8': <Badge status='success' text='栖息' />,\n          }\n          return config[interests]\n        },\n        width: 80\n      },\n      {\n        title: '生日',\n        dataIndex: 'birthday',\n        width: 120\n      },\n      {\n        title: '操作',\n        width: 120,\n        render(text, item) {\n          return <a href=\"#\" onClick={(item) => {this.handleDelete(item)}}>删除</a>\n        }\n      }\n    ]\n\n    const rowCheckSelection = {\n      type: 'checkbox',\n      selectedRowKeys: this.state.selectedRowKeys,\n      onChange: (selectedRowKeys, selectedRows) => {\n        let ids = []\n        selectedRows.map(item => {\n          ids.push(item.id)\n        })\n        //  const selectedIds = selectedRows.map(item => {\n        //    return item.id\n        //  })\n        console.log('selectedRows')\n        console.log(selectedRows)\n        console.log('record')\n        console.log(this.state.selectedItem)\n        this.setState({\n          selectedRowKeys, // 这个是必须的\n          selectedIds: ids, // 附加的\n          selectedRows: selectedRows // 多选时 把选中的所有数据存起来 方便管理 onRow 会存单条数据\n        })\n      }\n    }\n\n    return (\n      <div>\n        <Card title='头部固定' style={{marginTop: 20}}>\n          <Table\n            columns={columns}\n            rowSelection={rowCheckSelection} // type(单选或者多选); onSelect(选中之后到回调); onChange(选中的切换回调)\n            dataSource={this.state.dataSource}\n            bordered\n            scroll={{y: 240}}\n            pagination={false}\n            onRow={(record, index) => {\n              return {\n                onClick: () => { // row 当前行被点击之后的回调\n                  this.onRowClick(record, index)\n                }\n              }\n            }}\n          />\n\n        </Card>\n        <Card title='左侧固定' style={{marginTop: 20}}>\n          <Table\n            columns={columns}\n            rowSelection={rowCheckSelection} // type(单选或者多选); onSelect(选中之后到回调); onChange(选中的切换回调)\n            dataSource={this.state.dataSource}\n            bordered\n            pagination={false}\n            onRow={(record, index) => {\n              return {\n                onClick: () => { // row 当前行被点击之后的回调\n                  this.onRowClick(record, index)\n                }\n              }\n            }}\n          />\n\n        </Card>\n        <Card title='表格排序' style={{marginTop: 20}}>\n          <Table\n            columns={columns2}\n            rowSelection={rowCheckSelection} // type(单选或者多选); onSelect(选中之后到回调); onChange(选中的切换回调)\n            dataSource={this.state.dataSource}\n            bordered\n            pagination={false}\n            onRow={(record, index) => {\n              return {\n                onClick: () => { // row 当前行被点击之后的回调\n                  this.onRowClick(record, index)\n                }\n              }\n            }}\n            onChange={this.handleTableChange} // 分页、排序、 筛选时发生变化的回调\n          />\n\n        </Card>\n        <Card title='操作按钮' style={{marginTop: 20}}>\n          <Table\n            columns={columns3}\n            rowSelection={rowCheckSelection} // type(单选或者多选); onSelect(选中之后到回调); onChange(选中的切换回调)\n            dataSource={this.state.dataSource}\n            bordered\n            pagination={false}\n            onRow={(record, index) => {\n              return {\n                onClick: () => { // row 当前行被点击之后的回调\n                  this.onRowClick(record, index)\n                }\n              }\n            }}\n          />\n\n        </Card>\n      </div>\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}